#!/usr/bin/env python
import sys
import json

from twisted.internet import reactor
from twisted.web.resource import Resource
from twisted.web.server import Site, NOT_DONE_YET
from twisted.internet import defer


class ChatResource(Resource):
    isLeaf = True

    AVAILABLE_METHODS = {}

    def render_POST(self, request):
        try:
            query = json.loads(request.content.read())
        except (ValueError, TypeError):
            return self._render_error400(request, 'JSON loads error')

        try:
            if 'method' not in query:
                raise Exception('method not in request')
            if 'params' not in query:
                raise Exception('params not in request')
            method, params = query['method'], query['params']

            if method not in self.AVAILABLE_METHODS:
                raise Exception('method not found')
            if not isinstance(params, dict):
                raise Exception('params not dict')
        except Exception as e:
            request.setResponseCode(400)
            return json.dumps({'result': None, 'error': str(e)})

        getattr(self, self.AVAILABLE_METHODS[method])(request, params)
        return NOT_DONE_YET


def main():
    host, port = '', 28832
    if len(sys.argv) == 3:
        host, port = sys.argv[1], int(sys.argv[2])

    reactor.listenTCP(port, Site(ChatResource()), interface=host)
    reactor.run()

if __name__ == "__main__":
    main()
