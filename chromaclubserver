#!/usr/bin/env python
import argparse
import sys
import SocketServer, BaseHTTPServer
import urlparse, json, base64
import collections

from pycoin import ecdsa
from pycoin.encoding import sec_to_public_pair, hash160, public_pair_to_bitcoin_address

from coloredcoinlib import BlockchainState
from coloredcoinlib.blockchain import script_to_raw_address

from ngcccbase.pwallet import PersistentWallet
from ngcccbase.wallet_controller import WalletController
from ngcccbase import pycoin_txcons


class BuildHTTPServer(SocketServer.TCPServer):
    allow_reuse_address = True

    def __init__(self, params, *args, **kwargs):
        SocketServer.TCPServer.__init__(self, *args, **kwargs)
        self.params = params


class MessageStore(object):
    STORE_SIZE = 100

    def __init__(self):
        self._store = collections.defaultdict(list)

    def add_message(self, key, address, message):
        if len(self._store[key]) > 0:
            currentId = self._store[key][0][0] + 1
        else:
            currentId = 0
        data = [(currentId, address, message)]
        self._store[key] = data + self._store[key][-(self.STORE_SIZE-1):]
        return json.dumps(True)

    def get_messages(self, key, lastId):
        if len(self._store[key]) == 0:
            return json.dumps([])

        data = []
        for item in self._store[key]:
            if item[0] <= lastId:
                break
            data.append(item)
        return json.dumps(data[::-1])

messageStore = None


class ServerWallet(object):
    def __init__(self, isTestNet):
        self._isTestNet = isTestNet

        self._pwallet = PersistentWallet('wallet.sqlite', isTestNet)

        self._pwallet.wallet_config['testnet'] = isTestNet
        ccc = self._pwallet.wallet_config.get('ccc', {})
        ccc['colordb_path'] = 'color_db.sqlite'
        self._pwallet.wallet_config['ccc'] = ccc

        self._pwallet.init_model()
        self._wallet = self._pwallet.get_model()
        self._controller = WalletController(self._wallet)
        self._bitcoind = BlockchainState.from_url(None, isTestNet)

    def check_request(self, params):
        color_id = self._wallet.ccc.colormap.resolve_color_desc(params['color_set'])
        values = self._wallet.ccc.colordata.get_colorvalues(
            [color_id], params['txhash'], params['outindex'])
        if values == []:
            raise Exception('get_colorvalues')

        if self._bitcoind.bitcoind.gettxout(params['txhash'], params['outindex'], True) is None:
            raise Exception('gettxout')

        tx_data = self._wallet.get_blockchain_state().get_raw(params['txhash'])
        pycoin_tx = pycoin_txcons.deserialize(tx_data.decode('hex'))
        tx_out = pycoin_tx.txs_out[params['outindex']]
        if script_to_raw_address(tx_out.script) != hash160(params['pubkey'].decode('hex')):
            raise Exception('script_to_raw_address')

        publicPair = sec_to_public_pair(params['pubkey'].decode('hex'))
        data = int((hash160(str(params['data']) + params['sign']['salt'])).encode('hex'), 16)
        if not ecdsa.verify(ecdsa.generator_secp256k1, publicPair, data, params['sign']['sign']):
            raise Exception('ecdsa.verify')

        return public_pair_to_bitcoin_address(publicPair, compressed=False, is_test=self._isTestNet)

serverWallet = None


class BuildHTTPRequestHandler(BaseHTTPServer.BaseHTTPRequestHandler):
    def add_message(self, params):
        global serverWallet, messageStore
        try:
            address = serverWallet.check_request(params)
        except Exception as e:
            self.send_response(400)
            self.end_headers()
            self.wfile.write(str(e))
        else:
            self.send_response(200)
            self.end_headers()
            self.wfile.write(messageStore.add_message(params['color_set'], address, params['data']))

    def get_messages(self, params):
        global serverWallet, messageStore
        try:
            serverWallet.check_request(params)
        except Exception as e:
            self.send_response(400)
            self.end_headers()
            self.wfile.write(str(e))
        else:
            self.send_response(200)
            self.end_headers()
            self.wfile.write(messageStore.get_messages(params['color_set'], params['data']))

    def do_POST(self):
        length = int(self.headers.getheader('content-length'))
        data = json.loads(self.rfile.read(length))
        try:
            if data['method'] == 'addmessage':
                return self.add_message(data['params'])
            if data['method'] == 'getmessages':
                return self.get_messages(data['params'])
        except Exception as e:
            import traceback
            traceback.print_exc()
            print(e)
            self.send_response(500)
            self.end_headers()
            self.wfile.write(str(e))
            return
        self.send_response(400)
        self.end_headers()


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--port',
        action='store',
        default=28833,
        type=int,
        help="Server port (default: 28832)",
        metavar='port',
        dest='PORT'
    )
    parser.add_argument('--host',
        action='store',
        default='localhost',
        type=str,
        help="Server host (default: localhost)",
        metavar='host',
        dest='HOST'
    )
    parser.add_argument('--testnet',
        action='store_true',
        dest='testnet'
    )
    args = parser.parse_args()

    global messageStore, serverWallet
    messageStore = MessageStore()
    serverWallet = ServerWallet(args.testnet)

    server = BuildHTTPServer(args, (args.HOST, args.PORT), BuildHTTPRequestHandler)
    try:
        server.serve_forever()
    except:
        pass
    server.server_close()

if __name__ == "__main__":
    main()
